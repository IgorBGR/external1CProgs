using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using _1SCodeAnalyze.Структуры;

namespace _1SCodeAnalyze
{
	/*
Функция НайденаПроцедураСЗапросом(ТекстБлока, Параметры, ИмяПроцедуры)
	Если ЕстьЗапрос(ТекстБлока, Параметры) Тогда
		Возврат Истина;
	КонецЕсли;
	Параметры.Вложенность = Параметры.Вложенность + 1;
	Если Параметры.Вложенность > 35 Тогда 
		Возврат Ложь; 
	КонецЕсли;//глубина стека вызовов 
	RegExp2 = ИнициализироватьРегулярноеВыражение("");   
	RegExp_ = ИнициализироватьРегулярноеВыражение("^(?!\/\/)[^\.\/]*?([а-яa-z0-9_]*?[\s]?\()"); //Поиск вызываемых в цикле методов, необходимо фильтровать закомментированные функции
	Matches = RegExp_.Execute(ТекстБлока);
	ЧислоВхождений = Matches.Count();
	Если ЧислоВхождений = 0 Тогда Возврат Ложь; КонецЕсли;
	Для к = 0 По ЧислоВхождений-1 Цикл
		ОбработкаПрерыванияПользователя();
		Match = Matches.Item(к);
		Value = Match.Submatches.Item(0);//берем лишь название метода с одной скобкой из группировки  без пробелов и точек
		Если Value = ИмяПроцедуры Тогда
		//Рекурсия 	
				Параметры.Косяк = "Рекурсия в функции "+value +")->" + Параметры.Косяк;
                Продолжить;
		КонецЕсли;
		
		Состояние(Value);
		Если ЭтоСистемнаяФункция(Value) Тогда Продолжить; КонецЕсли;
		
		RegExp2.Pattern = "(Процедур|Функци)[ая][\s]*?" + ЭкранироватьРег(Value) + "([\S\s]*?)Конец\1[ыи]";   // поиск тела найденной в цикле функции во всем тексте модуля
		Matches2 = RegExp2.Execute(Параметры.Текст);
		ЧислоВхождений2 = Matches2.Count();
		Если ЧислоВхождений2 <> 1 Тогда Продолжить; КонецЕсли;
		//сюда попадает тело найденой процедуры
		ТекстПроцедуры = Matches2.Item(0).SubMatches.Item(1); //без названия самой процедуры чтоб не впасть в ложную рекурсию
		Если НайденаПроцедураСЗапросом(ТекстПроцедуры, Параметры, Value) Тогда  //ищем в теле метода запросы или другие методы с запросами .. рекурсивно вызывая саму себя погружаясь все глубже в код
			Параметры.Косяк = value +")->" + Параметры.Косяк + "("+?(Параметры.Вложенность = 1,Строка(НайтиномерСтроки(Параметры,Параметры.Match.FirstIndex + Match.FirstIndex)),"") +")";
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции
@"^(?!\/\/)[^\/]*?\.(выполнить|найтипокоду|найтипореквизиту|найтипонаименованию)[\s]?\(");
Функция _СтрЧислоВхождений(Текст, Подстрока)   //Количество вхождений не закомментированной подстроки 
	RegExp_ = ИнициализироватьРегулярноеВыражение("^(?!\/\/)[^\/]*?[^a-zа-я0-9_]"+ ЭкранироватьРег(Подстрока)+"[^a-zа-я0-9_]");
	Возврат RegExp_.Execute(Текст).Count();
КонецФункции

*/
	class АнализаторКода1С
	{
		//String @"(Процедур|Функци)[ая][\s]*?" + ЭкранироватьРег(Value) + "([\S\s]*?)Конец\1[ыи]"
		Dictionary<String, Модуль> Модули;
		List<FileInfo> files;

		public АнализаторКода1С (List<FileInfo> files)
		{
			this.files = files;
			Модули = new Dictionary<string, Модуль> ();
			ОбойтиВсеФайлы ();
          
		}

		private void ОбойтиВсеФайлы ()
		{
			foreach (FileInfo Файл in files) {
				String ИмяМодуля = Файл.Name.Replace (".Модуль.txt", "").Replace ("ОбщийМодуль.", "").Replace (".txt", "");
				Модуль МодульОбъекта = new Модуль (Файл);
				if (!Модули.ContainsKey (ИмяМодуля)) {
					Console.WriteLine ("module={0}", ИмяМодуля);
					Модули.Add (ИмяМодуля, МодульОбъекта);
					НайтиЦикл (МодульОбъекта);
				}
			}
//			foreach(Модуль МодульОбъекта in Модули.AsEnumerable()){
//				НайтиЦикл (МодульОбъекта);
//			}


		}

		private Boolean ЕстьЗапрос (String Текст, Модуль МодульОбъекта, int Index)
		{
			var ПоискЗапроса = new Regex (@"^(?!\/\/)[^\/]*?\.(выполнить|найтипокоду|найтипореквизиту|найтипонаименованию)[\s]?\(");
			Match Найдены = ПоискЗапроса.Match (Текст);
			if (!Найдены.Success)
				return false;
			МодульОбъекта.ДобавитьПроблему (Найдены.Groups [1].Value, Найдены.Index + Index);
			return true;
		}

		public void НайтиЦикл (Модуль МодульОбъекта)
		{
			var ПоискФункций = new Regex (@"(Для|Пока|for|while).+Цикл[\S\s]*?КонецЦикла"); //(Для|Пока).+ нужен иначе выражение находит ....Цикла;   код код код для цикл   КонецЦикла;
			//  необходимо переработать это выражение т.к если попадаются вложенные циклы то обрабатываются неверно
			MatchCollection Найдены = ПоискФункций.Matches (МодульОбъекта.Текст);
			foreach (Match Функция in Найдены) {
				Console.WriteLine (Функция.Groups [1].Value);
				if (ЕстьЗапрос (Функция.Value, МодульОбъекта, Функция.Index)) {
					Console.WriteLine ("Index={0}, Groups={1}, Captures={2}\n{3}\n{4}", Функция.Index, Функция.Groups.Count, Функция.Captures.Count, Функция.Groups [1].Value, Функция.Value);
					continue;
					//}else if(НайденаПроцедураСЗапросом(Match.Value, Параметры, "")
/*
 * Параметры.Смещение = 0;
 			НомерСтроки = "("+Строка(НайтиномерСтроки(Параметры,Match.FirstIndex))+").";
			Если ЕстьЗапрос(Match.Value, Параметры) Тогда
				Параметры.Косяк = "Прямой запрос в цикле "+ НомерСтроки + Параметры.Косяк +"();";
				ДобавитьСтрокуВТаблицу(Параметры);
				Продолжить;
			ИначеЕсли НайденаПроцедураСЗапросом(Match.Value, Параметры, "") Тогда
				Параметры.Косяк =  НомерСтроки + Параметры.Косяк;
				ДобавитьСтрокуВТаблицу(Параметры);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
     */
  
				}

			}

		}
	}
}
