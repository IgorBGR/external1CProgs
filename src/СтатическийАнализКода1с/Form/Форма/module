Перем RegExp;
Процедура КнопкаВыполнитьНажатие(Кнопка)
	ПолучитьВсеФайлы(ПутьККаталогу);
КонецПроцедуры

Процедура ПолеВвода1НачалоВыбора(Элемент, СтандартнаяОбработка)
	Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	Текст = "ru = ""Текст""; en = ""Text""";
	Фильтр = НСтр(Текст)+"(*.txt)|*.txt";
	ДиалогОткрытияФайла.Фильтр = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок = "Выберите каталог с исходными кодами конфигурации выгруженными в файлы для проверки";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ПутьККаталогу = ДиалогОткрытияФайла.Каталог;
	КонецЕсли;
	ВыбФайл = Новый Файл(ПутьККаталогу);
	Если Не ВыбФайл.ЭтоКаталог() Тогда
		Текст = "Укажите каталог!";
		Предупреждение(НСтр(Текст));
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыExcel(Кнопка)
	    Выгрузка();
КонецПроцедуры

Процедура Выгрузка()
	ТекФайлИксель = ПутьККаталогу + "\ErrorsList.xls";
	Сообщить(ТекФайлИксель);
	УдалитьФайлы(ТекФайлИксель);
	CоnnectXLS = Новый COMОбъект("ADODB.Connection");
	CоnnectXLS.Open("Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ТекФайлИксель + ";Extended Properties=""Excel 8.0;HDR=YES""");
	CоnnectXLS.Execute("CREATE TABLE [ErrorsList] (NAME CHAR(100), LINE CHAR(10), PROBLEM CHAR(100), DESCRIPTION CHAR(100), SOURCE CHAR(200))");
	Для Каждого СтрТаб Из таблицаОшибок Цикл
		CоnnectXLS.Execute("INSERT INTO [ErrorsList] (NAME, LINE, PROBLEM, DESCRIPTION, SOURCE) VALUES ('" + СокрЛП(СтрТаб.Модуль) + "', '" + Лев(Строка(СтрТаб.НомерСтроки),10) + "', '" + Строка(СтрТаб.Проблема) + "', '" + Строка(СтрТаб.НачалоТекста) + "', '" + Лев(Строка(СтрТаб.ИсходныйКод),200) + "')");	
	КонецЦикла;
	CоnnectXLS.Close();
КонецПроцедуры
//-------------------------core-----------------------------------------------------
Функция НайтиНомерСтроки(Параметры,ИндексДо)
	Область = Сред(Параметры.Текст,1,ИндексДо);
	Возврат СтрЧислоВхождений(Область,Символы.ПС)+1;
КонецФункции

Процедура ДобавитьСтрокуВТаблицу(Параметры)
	Параметры.ЕстьОшибки = Истина;
	НомерСтроки = НайтиНомерСтроки(Параметры,Параметры.Match.FirstIndex);
	Сообщить(Параметры.ИмяФайла+" : "+Строка(НомерСтроки)+" "+ Сред(Параметры.Match.Value,1,100));
	Новаястрока = Параметры.ТаблицаОшибок.Добавить();
	Новаястрока.Модуль = Параметры.ИмяФайла;
	Новаястрока.НомерСтроки = НомерСтроки;
	Новаястрока.Проблема = Параметры.Проблема;
	Новаястрока.НачалоТекста = Строка(Параметры.Косяк);
	Новаястрока.ИсходныйКод = Параметры.Match.Value;	
	
КонецПроцедуры

Функция ИнициализироватьРегулярноеВыражение(Паттерн)
	RegExp_=Новый COMОбъект("VBScript.RegExp");
	RegExp_.IgnoreCase = -1; //Игнорировать регистр
	RegExp_.Global = -1; //Поиск всех вхождений шаблона
	RegExp_.MultiLine = -1; //Многострочный режим
	RegExp_.Pattern = Паттерн;
	Возврат RegExp_;
КонецФункции

Функция ЭкранироватьРег(Знач Текст)
	Экранировать = "|.+*(){}^$[]?/";
	Текст = СтрЗаменить(Текст,"\","\\");
	Для н = 1 по СтрДлина(Экранировать) Цикл 
		Сим = Сред(Экранировать,н,1); 
		Текст = СтрЗаменить(Текст,Сим,"\"+Сим);
	КонецЦикла;
	Текст = СтрЗаменить(Текст," ","[\s]?");
	Возврат Текст;
КонецФункции

Функция ЭтоСистемнаяФункция(Текст)
	//Возврат Ложь;
	Системные = " формат( , сумма( , пустаястрока( , значениезаполнено( , запрос( , соответствие( , структура( , срезпоследних( , обороты( , ?( , типзнч( , тип( , сообщить( , количество( , окр( , строка( , сокрлп( , предупреждение( , заполнитьзначениясвойств( , и (  , сред( ,  лев( , прав( , число( , текущаядата( , максимум( , среднее( , минимум( , найти( , или ( ";	
	Возврат Найти(Системные,нрег(Текст))>0;
КонецФункции

Функция ЕстьЗапрос(Текст, Параметры)
	RegExp_ = ИнициализироватьРегулярноеВыражение("^(?!\/\/)[^\/]*?\.(выполнить|найтипокоду|найтипореквизиту|найтипонаименованию)[\s]?\("); //Находим незакомментированный запрос в коде
	Matches = RegExp_.Execute(Текст);
	ЧислоВхождений = Matches.Count();
	Если ЧислоВхождений = 0 Тогда Возврат Ложь; КонецЕсли;
	Параметры.Косяк = Matches.Item(0).Submatches.Item(0);
	Параметры.Смещение = Matches.Item(0).FirstIndex;
	Возврат Истина; 
КонецФункции

Функция НайденаПроцедураСЗапросом(ТекстБлока, Параметры, ИмяПроцедуры)
	Если ЕстьЗапрос(ТекстБлока, Параметры) Тогда
		Возврат Истина;
	КонецЕсли;
	Параметры.Вложенность = Параметры.Вложенность + 1;
	Если Параметры.Вложенность > 35 Тогда 
		Возврат Ложь; 
	КонецЕсли;//глубина стека вызовов 
	RegExp2 = ИнициализироватьРегулярноеВыражение("");   
	RegExp_ = ИнициализироватьРегулярноеВыражение("^(?!\/\/)[^\.\/]*?([а-яa-z0-9_]*?[\s]?\()"); //Поиск вызываемых в цикле методов, необходимо фильтровать закомментированные функции
	Matches = RegExp_.Execute(ТекстБлока);
	ЧислоВхождений = Matches.Count();
	Если ЧислоВхождений = 0 Тогда Возврат Ложь; КонецЕсли;
	Для к = 0 По ЧислоВхождений-1 Цикл
		ОбработкаПрерыванияПользователя();
		Match = Matches.Item(к);
		Value = Match.Submatches.Item(0);//берем лишь название метода с одной скобкой из группировки  без пробелов и точек
		Если Value = ИмяПроцедуры Тогда
		//Рекурсия 	
				Параметры.Косяк = "Рекурсия в функции "+value +")->" + Параметры.Косяк;
                Продолжить;
		КонецЕсли;
		
		Состояние(Value);
		Если ЭтоСистемнаяФункция(Value) Тогда Продолжить; КонецЕсли;
		
		RegExp2.Pattern = "(Процедур|Функци)[ая][\s]*?" + ЭкранироватьРег(Value) + "([\S\s]*?)Конец\1[ыи]";   // поиск тела найденной в цикле функции во всем тексте модуля
		Matches2 = RegExp2.Execute(Параметры.Текст);
		ЧислоВхождений2 = Matches2.Count();
		Если ЧислоВхождений2 <> 1 Тогда Продолжить; КонецЕсли;
		//сюда попадает тело найденой процедуры
		ТекстПроцедуры = Matches2.Item(0).SubMatches.Item(1); //без названия самой процедуры чтоб не впасть в ложную рекурсию
		Если НайденаПроцедураСЗапросом(ТекстПроцедуры, Параметры, Value) Тогда  //ищем в теле метода запросы или другие методы с запросами .. рекурсивно вызывая саму себя погружаясь все глубже в код
			Параметры.Косяк = value +")->" + Параметры.Косяк + "("+?(Параметры.Вложенность = 1,Строка(НайтиномерСтроки(Параметры,Параметры.Match.FirstIndex + Match.FirstIndex)),"") +")";
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

Функция НайтиЗапросВЦикле(Параметры)
	RegExp = ИнициализироватьРегулярноеВыражение("(Для|Пока).+Цикл[\S\s]*?КонецЦикла"); //(Для|Пока).+ нужен иначе выражение находит ....Цикла;   код код код для цикл   КонецЦикла;
	//  необходимо переработать это выражение т.к если попадаются вложенные циклы то обрабатываются неверно
	Matches = RegExp.Execute(Параметры.Текст);
	ЧислоВхождений=Matches.Count();
	Если ЧислоВхождений>0 Тогда 
		Для к = 0 По ЧислоВхождений-1 Цикл
			ОбработкаПрерыванияПользователя();
			Match = Matches.Item(к);
			Параметры.Match = Match;
			Параметры.Вложенность = 0;
			Параметры.Смещение = 0;
			Параметры.Косяк =" Цикл(";
			НомерСтроки = "("+Строка(НайтиномерСтроки(Параметры,Match.FirstIndex))+").";
			Если ЕстьЗапрос(Match.Value, Параметры) Тогда
				Параметры.Косяк = "Прямой запрос в цикле "+ НомерСтроки + Параметры.Косяк +"();";
				ДобавитьСтрокуВТаблицу(Параметры);
				Продолжить;
			ИначеЕсли НайденаПроцедураСЗапросом(Match.Value, Параметры, "") Тогда
				Параметры.Косяк =  НомерСтроки + Параметры.Косяк;
				ДобавитьСтрокуВТаблицу(Параметры);
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецФункции

Функция _СтрЧислоВхождений(Текст, Подстрока)   //Количество вхождений не закомментированной подстроки 
	RegExp_ = ИнициализироватьРегулярноеВыражение("^(?!\/\/)[^\/]*?[^a-zа-я0-9_]"+ ЭкранироватьРег(Подстрока)+"[^a-zа-я0-9_]");
	Возврат RegExp_.Execute(Текст).Count();
КонецФункции

Функция ПроверитьЛишнийКод(Параметры)
	RegExp = ИнициализироватьРегулярноеВыражение("(Процедур|Функци)([ая])[\s]*?([а-яa-z0-9_]+)\(([\S\s]*?)Конец\1[ыи]");
	RegExp_ = ИнициализироватьРегулярноеВыражение("^(?!\/\/)[^\.\S\/]*?([а-яa-z0-9_]+)[\s]*?=[\s]*?новый[\s]");
	Matches = RegExp.Execute(Параметры.Текст);
	ЧислоВхождений=Matches.Count();
	Если ЧислоВхождений>0 Тогда 
		Для к = 0 По ЧислоВхождений - 1 Цикл
			ОбработкаПрерыванияПользователя();
			Match = Matches.Item(к);
			Параметры.Match = Match;
			Параметры.Вложенность = 0;
			Параметры.Смещение = 0;
			ПроцедураФункция = Match.Submatches.Item(0)+Match.Submatches.Item(1);
			ИмяМетода = Match.Submatches.Item(2); 
			ТекстБлока = Match.Submatches.Item(3);
			Переменные = RegExp_.Execute(ТекстБлока);
			ЧислоПеременных = Переменные.Count();
			Если ЧислоПеременных = 0 Тогда Продолжить; КонецЕсли;
			Для н = 0 По ЧислоПеременных - 1 Цикл
				ОбработкаПрерыванияПользователя();
				Переменная = Переменные.Item(н);
				Value = Переменная.Submatches.Item(0);//берем лишь название переменной
				Если _СтрЧислоВхождений(Параметры.Текст, Value) = 1  Тогда //количество использований переменной    7 041,00694 | 7 041,00519
					Состояние(Value);
					Параметры.Косяк ="("+Строка(НайтиномерСтроки(Параметры,Match.FirstIndex + Переменная.FirstIndex))+") Переменная "+ Value + " инициализируется, но не используется в " + ПроцедураФункция + " " + ИмяМетода ;
					ДобавитьСтрокуВТаблицу(Параметры);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецФункции
//----------------main-----------------------------------------
Функция ПолучитьВсеФайлы(путь)
	
	ОчиститьСообщения();
	ТаблицаОшибок.Очистить();
	КоличествоФайлов = 0;
	НайденныеФайлы = НайтиФайлы(путь, "*.txt", Истина); 
	
	Для каждого ФайлПроверки из НайденныеФайлы Цикл
		Если Не ПустаяСтрока(ФильтрФайлов) Тогда
			 Если Найти(ФайлПроверки.ИмяБезРасширения,ФильтрФайлов) = 0 Тогда Продолжить; КонецЕсли;
		КонецЕсли;	
		ТекстовыйФайл =  Новый ТекстовыйДокумент();
		ТекстовыйФайл.ТолькоПросмотр = Истина;
		ТекстовыйФайл.Прочитать(ФайлПроверки.ПолноеИмя);
		Параметры = Новый Структура("ТаблицаОшибок, ИмяФайла, Текст, Проблема, ЕстьОшибки, Косяк, Вложенность, Смещение, Match", ТаблицаОшибок, ФайлПроверки.ИмяБезРасширения, ТекстовыйФайл.ПолучитьТекст(), "Запрос в цикле",Ложь,"",0,0);
		НайтиЗапросВЦикле(Параметры);
		Параметры.Проблема = "Неиспользуемые переменные";
		ПроверитьЛишнийКод(Параметры);
		ОбработкаПрерыванияПользователя();
		Если Параметры.ЕстьОшибки = Истина Тогда
			КоличествоФайлов = КоличествоФайлов + 0.00001;	
		КонецЕсли;
		КоличествоФайлов = КоличествоФайлов + 1;
	КонецЦикла;
КонецФункции

